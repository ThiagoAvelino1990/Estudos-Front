/*
*Softwares 
*/
VisualStudio
Node.Js -> https://nodejs.org/en/


`${O que faz o JavaScript}`

Cliente x Server

Cliente <-> Navegador <-> Nuvem Internet <-> Servidor

- JavaScript funciona mais em client side. mas também pode ser utilizada em backend
- Tecnologias relacionadas
	* HTML		 : Responsável pelo contéudo
	* CSS		 : Responsável pelo design
	* JavaScript : Responsável pelas integrações/ interações

/*Q01
Sabe a diferença entre um cliente e um servidor para a Internet?
*/
/*Q02
Para que serve HTML, CSS, e JavaScript?
*/
/*Q03
Cite 4 sites que fazem uso do JavaScript?
*/	

------------------------------------------------------------------
`${Evolução do JavaScript}`

/*Q01
Sabe que empresa criou o JavaScript?
*/
/*Q02
Java e JavaScript possuem alguma relação?
*/
/*Q03
Oque ECMAScript tem a ver com JavaScript?
*/
/*Q04
Sabia que o programa WhatsApp desktop é criado em JavaScript ?
*/

------------------------------------------------------------------
`${Primeiros Passos JavaScript}`
Bibliografia
	- Livro: JavaScript o guia definitivo
	- Livro: Javascript guia do programador
	- Livro: Guia de referência da Mozilla developer.mozilla.org
	- Livro: guia de referência da Ecma ecma-international.org -> ECMA 262

Download Nodejs
https://nodejs.org/en/

------------------------------------------------------------------
`${Primeiros Scripts}`	

------------------------------------------------------------------
`${Tipos de dados e Variáveis}`

Existem 3 formas de demilitar string no javascript
"" Por aspas duplas
'' Por aspas simples
`` Por cráse

Identificadores
	- Podem começar com letra, $, _
	- não podem começar com númeres
	- É possível usar letras ou números
	- É possível usar acentos e símbolos
	- Não podem conter espaços
	- Não podem ser palavras reservadas

Dicas
	- Maísculas e minúsculas fazem diferença
	- Tenta escolher nomes coerentes para variáveis
	- Evite se tornar um `programador alfabeto`ou um `programador contador`

Tipo number
	5 18 -12 0.5 -15.9 3.14 8.0
		infinity
		Nan(Not a number)

Tipo string
	"Google" 'JavaScript' `Maria`

Tipo boolean
	true false	

Tipo NULL
Tipo undefined
Tipo object
	- Array
Tipo function

/*------------------------------------------------------------------*/
/*
-Curso JavaScript #06

Q01
Oque é uma variável
*/
/*Q02
Como declarar uma variávle numérica inteira ou real usando JS?
*/
/*Q03
Quais são os tipos primitivos do JavaScript
*/
/*Q04
Oque significa colocar o valor null dentro de uma variável ?
*/
/*------------------------------------------------------------------*/

`${Manipulação de Dados}`

var ou let ou const para declaração de variáveis



        // number + number para adição
        // string + string para concatenação

        //Number.parseInt(n) -> converção para número inteiro
        //Number.parseFloat(n) -> converção para número real
        //Number(n) -> conversão para inteiro/ real, porém o JavaScript que decide

        //Converção de número para string
        //String(n)
        //n.toString()

        //${} -> usa template string
        //Utilizado para interporlar o placeholder, strings com variáveis

        //Formantando Strings
        //s.length  mostra o tamanho da string
        //s.toUppercase()  tudo para 'MAÍUSCULA'
        //s.toLowerCase()  tudo para 'mínuscula'


        //Formatar números
        n.toFixed(d) // Método interno de todos os number. Para quantidade de casas decimais
        replace('.',',')//replace para trocar 

        //Para mostrar o tipo de moeda
         n1.toLocaleString('pt-BR',{style: 'currency', currency: 'BRL'})
	'R$ 1.545,50'
	 n1.toLocaleString('pt-BR',{style: 'currency', currency: 'USD'})
	'US$ 1.545,50'
	 n1.toLocaleString('pt-BR',{style: 'currency', currency: 'EUR'})
	'€ 1.545,50'

/*----------------------------*/
/*Q01
Como é possível guardar o valor digitado em um prompt() dentro de uma variável?
Q02
Como fazer com que um número digitado em um prompt() possa ser usado em cáculos?
Q03
Como transformar um texto todo para letras MAIÚSCULAS?
Q04
Como mostrar um número formatado como um valor monetário?
*/

`${Operadores de JavaScript}`
	//Operadores:
	/*aritméticos(
		+ soma 5+2 = 7; 
		- subtração 5-2 = 3; 
		* multiplicação 5*2 = 10; 
		/ divisão real 5/2 = 2.5;
		% resto da divisão inteira 5%2 = 1; 
		** potência 5**2 = 25
				)
		Precedência de operadores
			1º ()
			2º **
			3º * / %(Mesma ordem de precedência. JavaScript realiza da esquerda para a direita)
			4º + -(Mesma ordem de precedência. JavaScript realiza da esquerda para a direita)
	*/
	//	atribuição
		/* = sinal de atribuição e não sinal de igual
		auto atribuição
			var n = 3
			 n = n + 4 	// n+=4 n recebe ele mesmo mais 4
			7
			 n = n - 5 	// n-=5 n recebe ele mesmo menos 5
			2
			 n = n * 4 	// n*=4 n recebe ele mesmo vezes 4
			8
			 n = n/2 	// n/=2 n recebe ele mesmo dividido por 4
			4
			 n = n **2 	// n**=2 n recebe ele mesmo potência 2
			16
			 n = n%5 	// n%=5 n recebe ele mesmo resto da divisão por 5
			1

			operador de incremento
				//pós incremento
				 var n = 10
				 n++ //adiciona mais um
				 n-- //subtrai mais um

				 //pré incremento
				 var n = 10
				 ++n //adiciona mais um
				 --n //subtrai mais um
		*/
	//	relacionais
	//	lógicos
	//	ternário


/*----------------------------*/
/*Q01
Para que serve o operador %?
*/
/*Q02
6 + 4 / 2 é igual a 5 ou a 8?
*/
/*Q03
se uma variável n está valendo 10 e executamos um n+=5, qual será o seu novo valor ?
*/
/*Q04
Para que servem os operadores ++ e -- ao lado de uma variável?
*/

`${Operadores de JavaScript. (Parte 2)}`

	//	relacionais. Não tem ordem de precedência. A leitura é feita da esquerda para a direita
		/*
		> maior
		< menor
		>= maior ou igual
		<= menor ou igual
		== igual
		!= diferente

		obs: toda expressão que tem um operador relacional, o resultado e booleano, ou seja, verdadeiro ou falso

		Procedência 1º operadores aritiméticos
			    2º operadores relacionais
		/*
		Exemplos 
		Valor
		idade
		curso
		n1!=n2
		*/
			identidade	    		
			5 == 5 true //sinal de igualdade 
			5 == '5' true //sinal de igualdade não testa o tipo. São valores de tipos diferentes, mas os mesmos tem a mesa grandeza
			//identidade(igualdade restrita)
			5 ==='5' false //5 identico a 5
			5 === 5 true // 5 é identico a 5
			5 !== '5' //desiqual restrito
		*/	
	/*	lógicos
		! Negação. 'Não' lógico
			O resultado é ao contrário, ou seja, se for um NÃO verdadeiro, o resultado é falso.
		&& Conjunção. 'e' lógico
			Deve conter dois resultados verdadeiros para ter o resultado como verdadeiro
		|| Disjunção. 'ou' lógico
			Basta ter um resultado verdadeiro para ter o resultado como verdadeiro

			Precedência
				1º operador aritimético
				2º operador relacional
				3º operador lógico
				obs: Caso tenha apenas operadores lógicos, a ordem é:
				1º não, 2º 'e' 3º 'ou'
		*/

	/*	ternário - dois operadores dentro da mesma expressão
			?
			:
		teste ? true : false
		média >= 7.0 ? "Aprovado" : "Reprovado"

		Teste no node
		> var media = 5.5

		undefined
		> media > 7?"APROVADOR":"REPROVADO"
		'REPROVADO'
		> media += 3
		8.5
		> media > 7?"APROVADOR":"REPROVADO"
		'APROVADOR'
		> media > 7?"APROVADO":"REPROVADO"
		'APROVADO'
		> var x = 8
		undefined
		> var res = x % 2 ==0?5:9
		undefined
		> res
		5
		> x
		8
		> res
		5
		> var idade = 19
		undefined
		> var r = idade >= 18?"MAIOR":"MENOR"
		undefined
		> r
		'MAIOR'
		> idade
		19
		>
	*/

--#9
Q01
Qual é a diferença entre usar =. ==. === em códigos escritos em JS?
Q02
Em uma mesma expressão, temos os operadores || e &&. quem eu resolvo primeiro ?
Q03	
Sabe usar o operador ternário para colocar um entre dois valores em uma variável ?

${`Entendendo o DOM`}
Document Object Model -> DOM
	-Conjunto de objetos dentro do navegador que da acesso aos componentes internos do site.
	- árvore DOM do site
		-Começa na raíz do navegador e a raíz se chama window
			-location: url do site, pagina atual, anterior
			-document: documento atual
				-HTML
					-head
						-meta
						-title
						-...
					-body
						-h1
						-p
						-p
							-strong
						-div
						-..
			-history: guarda de onde veio, para onde vai

Acessar os elementos
	-por Marca(É possível selecionar mais de um objeto)
		-getElementsByTagName()
		var p1 = window.document.getElementsByTagName(`p`)[0];
	-por ID
		-getElementById()
	-por nome
		-getElementsByName()
	-por classe
		-getElementsByClassName()
	-por seletor			
		-querySelector()

toda div é representada por uma #
toda cloasse é representada por um ponto .

--querySelector que faz a seleção através de elementos do CSS
var d = window.document.querySelector(div#msg); //alterações mais recente para seleção de um ID
d.style.background = 'blue'
 
 
--#10
Q01 - Oque significa a sigla DOM?

Q02 - Sabe montar a árvore DOM de um website simples ?

Q03 - Oque são os elementos Parent e os elementos Child em uma árvore DOM?

Q04 - Quais são os cinco principais métodos de selecionar elementos DOM dentro do Java Script ?

${`Eventos DOM`}

DOM - Document Object Model => facilitador que existe dentro do navegador para dar acesso aos elementos diretamente para o javascript 

--Referencia de eventos JavaScript
https://developer.mozilla.org/pt-BR/docs/Web/Events

--Detecção de erros
	- Usar Devtools dos navegadores. Clicar com o botão direito na página e ir em inspect. E verificar na aba "console";

	
--#11
--Condições simples
--Condições compostas
--Condições aninhadas
--Condições multiplas
Q01 - Três eventos que podem acontecer com elementos DOM de um site ?

Q02 - Oque é uma função? Como criar funções em JS ?

Q03 - Como pegar valores de caixa de texto e fazer cálculos com eles ?

`${Condições Parte 1 em JS}`

if(condição){
	true
}
else{
	false
}

//Tipos de condição
=>Condição simples: if(condição){
						bloco1
					}
------------------					
=>Condição	composta: if(condição){
						bloco1
					  }
					  else{
						bloco2
					  }
------------------
Extensão node exec para executar o JavaScript utilizando a tecla F8



--#12

Q01- Como usar a extensão NodeExec no VSCode?

Q02- Como criar uma condição em JavaScript?

Q03- Qual a diferença entre condição simples e condição composta ?


`${Condições Parte 2 em JS}`

//Tipos de condição
=>Condição aninhadas: 
-Colocar outras condições dentro de uma condição composta 
					if(condição){
						bloco1
					  }
					  else{
						if(condição){
							bloco2
						}
						else{
							bloco3
						}
					  }


=>Condição multiplas:
-Serve para valores fixos. Este tipo de condição tem a possibilidade de testar vários valores. 
-Geralmente é utilizado em situações esporádicas.
					switch(expressao){
						case valor1:
							bloco;
							break;	=> É obrigatório informar
						case valor2:
							bloco;
							break;	=> É obrigatório informar
						case valor3:
							bloco;
							break;	=> É obrigatório informar
						default:
							bloco;
							break;	=> É obrigatório informar
					}


---------------------------
#13
`${Repetições Parte 1 em JavaScript}`

Tipos de repetições: Repetições com teste no início;
					 Repetições com teste no final;
					 Repetições com controle;

 Q01 - Como mudar a cor de fundo de um site dinamicamente usando JS ?

 Q02 - Como inserir uma imagem dentro do seu site sem ter a tag <img> previamente criada ?

 Q03 - Quais são e como utilizar os tipos de condições existentes no JS ?

/**
*Estruturas de repetição
*/

-- Estrutura de repetição com teste lógico no iníco(while)
1º Executa o teste 
2º Executa o bloco		
					while(condição){
						bloco de comandos
					}

-- Estrutura de repetição com teste lógico no final(do while)
1º Executa o bloco
2º Executa o teste
					do {
						bloco de comandos
					}while(condição)
					
---------------------------
#14
`${Repetições Parte 2 em JavaScript}`

Q01 - Oque faço se quiser fazer uma determinada atividade acontecer várias vezes ?

Q02 - qual a diferença entre as estruturas de condição e as estruturas de repetição ?

Q03 - Qual a diferença entre as estruturas while e a do..while ?


--Estrutura de repetição com variável de controle


for (inicialização da variável; teste lógico; incremento){
	bloco de comandos;
}

#15
`${Variáves compostas}`

Q01 - Qual a diferença entre as estruturas de repetição ?

Q02 - Como manipular objetos de formulário no JS?

Q03 - É melhor códigos menores e mais simplificados ?

Q04 - Qual a dificuldade de usar array ?

//variáveis simples só conseguem armazenar um valor por vez

//variáveis compostas são capazes de armazenar vários valores em uma mesma estrutura

Um array ou vetor ou uma variável composta é uma variável que contém vários elementos, e cada elemento é composto por um valor e uma chave d eidentificação;
/**
*Exemplo de declaração	
*	let num = [5,8,4]
*			   0 1 2
*/ 

Adicionando mais um valor ao vetor
num.push(7);
função push adiciona um outro índice no array, fazendo com que seja possível adicionar um outro elemento

num.length;
função length traz o comprimento do array

num.sort();
função sort coloca em ordem crescente todos os elementos de um vetor

/**
*Estrutura de repetição for in
*Sintaxe que funciona apenas para arrays e objetos
*/
for (var i IN objeto){
	bloco de comandos;
}

/**
* função indexOf para um vetor, significa buscar uma chave a partir de um valor dentro de um vetor
	vetor.idexOf(valor);
	se retorno for -1, significa que o JavaScript não encontrou a chave do valor informado
*/



#16
`${Funções JavaScript}`

Q01 - Como simplificar os códigos com o usso de array?

Q02 - Como colocar um array em ordem usando apenas uma função da linguagem JavaScript ?

Q03 - Como disparar uma função simples ao apertar um botão ?

- Funções são ações executadas assim que são chamadas ou em decorrência de algum evento;
- Uma função pode receber parâmetros e pode retornar um resultado;

--Estrutura de uma função
function nome_função (parâmetros){
	Bloco de comandos;
	return;
}

--Função com parâmetro definidos
--Ao ingular o resultado de um parâmetro, no caso p2, caso não é enviado nenhum parâmetro, p2 assume o valor de zero
function nome_função (p1, p2 = 0){
	Bloco de comandos;
	return;
}

#17
`${Próximos Passos}`
- Fundamentos;
- Variáveis e dados;
- Operadores;
- Condições;
- Repetições;
- Arrays;
- Funções;
- DOM(Document Object Model)

Continuar estudando...
- HTML e CSS
- Functions
- Objetos
- Modularização
- Expressões Regulares(Regex)
- JSON
- Ajax
- NodeJS
- Jquery
- Angular

/**
Objetos são variáveis que além de guardar valores, eles também podem guardar funcionalidades
*Exemplo de declaração de um objeto
*	let objeto= {nome:`José`, sexo:`M`, peso:85.4, funcao(p){}}
*			   
*/ 
